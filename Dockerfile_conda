# For more information, please refer to https://aka.ms/vscode-docker-python
FROM python:3.8.3-slim-buster
#FROM python:3.8
#FROM nvcr.io/nvidia/l4t-ml:r32.4.2-py3
#FROM r32.4.2-py3
#FROM 0b67798283fa
# Keeps Python from generating .pyc files in the container
ENV PYTHONDONTWRITEBYTECODE 1

# Turns off buffering for easier container logging
ENV PYTHONUNBUFFERED 1

#RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install pip requirements
ADD requirements.txt .
RUN python --version
RUN python -m pip --version

#RUN pip3 install virtualenv
#RUN virtualenv -p python3 .venv
#RUN source .venv/bin/activate

RUN apt-get update
#RUN apt-get install -y --no-install-recommends apt-utils
RUN apt-get -y upgrade
#RUN apt-get install -y python3-scipy python3-pip
#RUN apt-get install -y git
#RUN apt-get install gfortran libatlas-base-dev libopenblas-dev liblapack-dev -y
RUN apt-get -y install curl
RUN cd /tmp
RUN curl â€“O https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh
RUN bash Anaconda3-2020.02-Linux-x86_64.sh
RUN source ~/.bashrc
RUN conda create -n sklearn-dev numpy scipy joblib cython conda-forge::compilers
RUN conda activate sklearn-dev
RUN pip install --verbose --no-build-isolation --editable .
#RUN pip3 install scikit-learn --index-url https://piwheels.org/simple
#RUN python3 -m pip install scikit-learn --index-url https://piwheels.org/simple

#RUN git clone git://github.com/scikit-learn/scikit-learn.git  # add --depth 1 if your connection is slow
#RUN cd scikit-learn

##RUN apt-get -y install build-essential python3-dev python3-pip
##RUN apt-get -y install cython3 python3-numpy python3-scipy
#RUN pip3 install cython
#RUN pip3 install --verbose --no-build-isolation --editable .
#RUN python -c "import sklearn; sklearn.show_versions()"
##RUN apt-get -y install python3-sklearn python3-sklearn-lib

##RUN pip3 install --editable .
#RUN pip3 install --verbose .
#https://scikit-learn.org/0.19/developers/advanced_installation.html#install-by-distribution
#RUN apt-get -y install build-essential python3-dev python3-setuptools python3-numpy python3-scipy libatlas-dev libatlas3gf-base
#RUN apt-get -y install build-essential python3-dev python3-setuptools python3-numpy python3-scipy libatlas-base-dev libatlas3gf-base
##RUN apt-get -y install build-essential python3-dev python3-setuptools python3-numpy python3-scipy libatlas-base-dev
#RUN apt-get -y install build-essential python3-dev python3-setuptools python3-numpy python3-scipy libatlas3gf-base
#RUN apt-get -y install build-essential python3-dev python3-setuptools python3-numpy python3-scipy
#RUN apt-get -y install python-matplotlib
#RUN update-alternatives --set libblas.so.3 /usr/lib/atlas-base/atlas/libblas.so.3
#RUN update-alternatives --set liblapack.so.3 /usr/lib/atlas-base/atlas/liblapack.so.3


#ls /usr/lib/lib*
#/usr/lib/libident.so.0     /usr/lib/libsigc-1.2.so.5      /usr/lib/libsupp.a
#/usr/lib/libident.so.0.22  /usr/lib/libsigc-1.2.so.5.0.7

#RUN update-alternatives --install /usr/lib/libblas.so.3 libblas.so.3 \                                                                                                                                                  
#        /usr/lib/openblas-base/libblas.so.3 40 \                                                                                                                                                                    
#    --slave /usr/lib/libblas.so.3gf libblas.so.3gf /usr/lib/openblas-base/libblas.so.3
#RUN update-alternatives --install /usr/lib/liblapack.so.3 liblapack.so.3 \                                                                                                                                              
#        /usr/lib/openblas-base/liblapack.so.3 40 \                                                                                                                                                                  
#    --slave /usr/lib/liblapack.so.3gf liblapack.so.3gf /usr/lib/openblas-base/liblapack.so.3 
##RUN pip install --user --install-option="--prefix=" -U scikit-learn
#RUN pip install --user --install-option="--prefix=" -U scikit-learn
#RUN pip install -U scikit-learn
#RUN pip install -U scikit-learn
##RUN python -m pip install -r requirements.txt
RUN pip install -r requirements.txt

# set the working directory in the container to /app
WORKDIR /app

# add the current directory to the container as /app
#ADD . /app

# Run bottle on port 8080
EXPOSE  8080

# During debugging, this entry point will be overridden. For more information, please refer to https://aka.ms/vscode-docker-python-debug
CMD ["python", "app.py"]
